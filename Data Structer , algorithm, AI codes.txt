1.	Linear Search
2.	Binary Search
3.	Bubble Sort
4.	Selection Sort
5.	Insertion Sort
6.	Heap Sort
7.	Quick Sort
8.	Merge Sort
9.	Counting Sort
10.	Simple Recursive
11.	Tower Of Hanoi
12.	Ackermann Function
13.	Activity Selection
14.	Coin Choosing Program
15.	Job Scheduling
16.	Fractional Knapsack
17.     Matrix multiplication
18.     BFS
19.     DFS
20.     LCS
21.     Array as arguement
22.     Representation of an array by pointer 
23.     Logarithms  
24.     Factorials
25.     PUSH/POP into/from Stack
26.     PUSH/POP into/from  Queue 
27.     PUSH/POP into/from circular Queue
28.     Singly Link list  
29.     next index value of adjacent array must be greater
30.     DIJKSTRA
31.     Kruskal
32.     fibonacci series
33.     Graph
34.     Reflex_Vacuum_Agent
35.     Simple_Vacuum_Agent



1. Linear Search    :

#include<iostream>
using namespace std;

int main(){
    int n;
cout<<"enter the size of the array  : ";
cin>>n;
int a[n];
cout<<"----enter the value inside the array--- "<<endl;
for(int i=0;i<n;i++){
  cin>>a[i];
}

    int z;
    cout<<"enter a value to do search :";
    cin>>z;
    int flag=0;
for(int i=0;i<n;i++){
        while(a[i]==z){
            flag++;
            break;
        }

}
if(flag==1){
    cout<<z<<" found";
}
else {
    cout<<z<<" not found";
}
return 0;
}

2. Binary Search  :

#include<iostream>
using namespace std;

int main(){
    int n;
cout<<"enter the size of the array  : ";
cin>>n;
int a[n];
cout<<"----enter the sorted value inside the array--- "<<endl;
for(int i=0;i<n;i++){
  cin>>a[i];
}

    int z;
    cout<<"enter a value to do search :";
    cin>>z;
    int flag=0;
    int l=1;
    int h=n;
    int m;
    while(h!=l){
       m=(h+l)/2;
       if(a[m]==z){
        flag++;
        break;
       }
       else if(a[m<z]){
        h=m-1;
       }
       else{
        l=m+1;
       }

    }
    if(flag==0){
        cout<<z<<" not found";
    }
    else {
        cout<<z<<" found";
    }

return 0;
}

3. Bubble Sort     :

#include<iostream>
using namespace std;

int main(){
    int n,i;
cout<<"enter the size of the array  : ";
cin>>n;
int a[n];
cout<<"----enter the value inside the array--- "<<endl;
for(i=0;i<n;i++){
  cin>>a[i];
}
int temp;
for(i=0;i<n;i++){
    for(int j=0;j<n-i-1;j++){
     while (a[j]>a[j+1]) {
      temp=a[j];
      a[j]=a[j+1];
      a[j+1]=temp;

     }
    }
}
cout<<"---the sorted array---"<<endl;
for(i=0;i<n;i++){
    cout<<a[i]<<endl;
}

return 0;
}

4.Selection Sort 
#include<iostream>
using namespace std;

int main(){
    int n,i;
cout<<"enter the size of the array  : ";
cin>>n;
int a[n];
cout<<"----enter the value inside the array--- "<<endl;
for(i=0;i<n;i++){
  cin>>a[i];
}
int temp,imin,j;
for(i=0;i<n;i++){
        imin=i;
    for(j=i+1;j<n;j++){
        if(a[j]<a[imin]){
          imin=j;
           }
    }
         temp=a[i];
        a[i]=a[imin];
        a[imin]=temp;
    }

cout<<"---the sorted array---"<<endl;
for(i=0;i<n;i++){
    cout<<a[i]<<endl;
}

return 0;
}

5.Insertion Sort

#include<iostream>
using namespace std;

int main(){
    int n,i;
cout<<"enter the size of the array  : ";
cin>>n;
int a[n];
cout<<"----enter the value inside the array--- "<<endl;
for(i=0;i<n;i++){
  cin>>a[i];
}
int value,hole;
for(i=1;i<n;i++){
     value=a[i];
    hole=i;
    while(hole>0&&a[hole-1]>value){
        a[hole]=a[hole-1];
        hole=hole-1;
    }
    a[hole]=value;
}


cout<<"---the sorted array---"<<endl;
for(i=0;i<n;i++){
    cout<<a[i]<<endl;
}

return 0;
}


7.Quick Sort


#include <stdio.h>
 
void quick_sort(int[],int,int);
int partition(int[],int,int);
 
int main()
{
    int a[50],n,i;
    printf("How many elements?");
    scanf("%d",&n);
    printf("\nEnter array elements:");
    
    for(i=0;i<n;i++)
        scanf("%d",&a[i]);
        
    quick_sort(a,0,n-1);
    printf("\nArray after sorting:");
    
    for(i=0;i<n;i++)
        printf("%d ",a[i]);
    
    return 0;        
}
 

9.counting sort
void quick_sort(int a[],int l,int u)
{
    int j;
    if(l<u)
    {
        j=partition(a,l,u);
        quick_sort(a,l,j-1);
        quick_sort(a,j+1,u);
    }
}
 
int partition(int a[],int l,int u)
{
    int v,i,j,temp;
    v=a[l];
    i=l;
    j=u+1;
    
    do
    {
        do
            i++;
            
        while(a[i]<v&&i<=u);
        
        do
            j--;
        while(v<a[j]);
        
        if(i<j)
        {
            temp=a[i];
            a[i]=a[j];
            a[j]=temp;
        }
    }while(i<j);
    
    a[l]=a[j];
    a[j]=v;
    
    return(j);
}
#include<iostream>
using namespace std;
int k=0;

/*Method to sort the array*/
void Counting_Sort(int A[],int B[],int n)    
{
	int C[k];
	for(int i=0;i<k+1;i++)
	{
		/*It will initialize the C with zero*/
		C[i]=0;
	}
	for(int j=1;j<=n;j++)
	{
		/*It will count the occurence of every element x in A 
		and increment it at position x in C*/
		C[A[j]]++;			    
	}
	for(int i=1;i<=k;i++)
	{
		/*It will store the last 
		occurence of the element i */
		C[i]+=C[i-1];            
	}
	for(int j=n;j>=1;j--)
	{
		/*It will place the elements at their 
		respective index*/
		B[C[A[j]]]=A[j];          
		/*It will help if an element occurs 
		more than one time*/
		C[A[j]]=C[A[j]]-1;		  
	}
}
int main()
{
	int n;
	cout<<"Enter the size of the array :";
	cin>>n;
	
	/*A stores the elements input by user */
	/*B stores the sorted sequence of elements*/  	
	int A[n],B[n]; 
	
	for(int i=1;i<=n;i++)        
	{
		cin>>A[i];
		if(A[i]>k)
		{
			/*It will modify k if an element 
			occurs whose value is greater than k*/
			k=A[i];              
		}
	}
	Counting_Sort(A,B,n);        
	/*It will print the sorted sequence on the 
	console*/ 
	for(int i=1;i<=n;i++)       
	{
		cout<<B[i]<<" ";
	}
	
	cout<<endl;
	return 0;



10.Simple Recursive(Factorial)
#include <iostream>
using namespace std;

factorial(int x){
if(x>=1){
    return x*factorial(x-1);
}
else return 1;
}

int main()
{
    int n;
    cout<<"Enter a number to find factorial: ";
    cin >> n;
    cout << "Factorial of " << n <<" = " << factorial(n);
    return 0;
}



11.Tower Of Hanoi:
#include<iostream>
using namespace std;

//tower of HANOI function implementation
void TOH(int n,char Sour, char Aux,char Des)
{
	if(n==1)
	{
		cout<<"Move Disk "<<n<<" from "<<Sour<<" to "<<Des<<endl;
		return;
	}

	TOH(n-1,Sour,Des,Aux);
	cout<<"Move Disk "<<n<<" from "<<Sour<<" to "<<Des<<endl;
	TOH(n-1,Aux,Sour,Des);
}

//main program
int main()
{
	int n;

	cout<<"Enter no. of disks:";
	cin>>n;
	//calling the TOH
	TOH(n,'A','B','C');

	return 0;
}


13. Activity Selection
#include <iostream>

using namespace std;

int main()
{
    int s[]={1,3,5,9,11};
    int f[]={3,4,7,11,12};
    int n=sizeof(s)/sizeof(s[0]);
    int i=0;
     cout<<i;
        for(int j=1;j<n;j++){
                if(f[i]<=s[j]){
                    cout<<j;
            i=j;
                }

        }

    return 0;
}

14. Coin Choosing Program
#include <iostream>
using namespace std;
int main()
{
int amount;
cout<<"enter the amount of bill : ";
cin>>amount;
int n1=amount,c1=0;
while(n1>=100){
   c1++;
   n1=amount-(100*c1);
}

cout<<"100 taka : "<<c1<<endl;
c1=0;
int n2=n1;
while(n2>=50){
    c1++;
    n2=n1-(50*c1);
}
cout<<"50 taka : "<<c1<<endl;
c1=0;
int n3=n2;
while(n3>=20){
    c1++;
    n3=n2-(20*c1);
}
cout<<"20 taka : "<<c1<<endl;
c1=0;
int n4=n3;
while(n4>=10){
    c1++;
    n4=n3-(10*c1);
}
cout<<"10 taka : "<<c1<<endl;
c1=0;
int n5=n4;
while(n5>=5){
    c1++;
    n5=n4-(5*c1);
}
cout<<"5 taka : "<<c1<<endl;
c1=0;
int n6=n5;
while(n6>=2){
    c1++;
    n6=n5-(2*c1);
}
cout<<"2 taka : "<<c1<<endl;
c1=0;
int n7=n6;
while(n7>=1){
    c1++;
    n7=n6-(1*c1);
}
cout<<"1 taka : "<<c1<<endl;


    return 0;
}

15. Job Scheduling
#include <iostream>
using namespace std;
int main()
{
int jobs[]={3,5,6,10,11,14,15,18,20,23};//running times of jobs should be ordered(accending).
int n=sizeof(jobs)/sizeof(jobs[0]);
int p1[n/2],p2[n/2],m=n;
for(int i=0;i<(m/2);i++){
    p1[i]=jobs[n-1];
    p2[i]=jobs[n-2];
    n=n-2;

}
cout<<"process 1 : ";//considering 2 process
for(int i=0;i<m/2;i++){
   cout<<p1[i]<<" ";
}
cout<<endl;
cout<<"process 2 : ";
for(int i=0;i<m/2;i++){
   cout<<p2[i]<<" ";
}
cout<<endl;

    return 0;
}



17.Matrix multiplication





#include<iostream>
#include<conio.h>
#include<stdlib.h>
using namespace std;
int cost[10][10],i,j,k,n,qu[10],front,rare,v,visit[10],visited[10];

int main()
{
int m;
cout <<"enter no of vertices";
cin >> n;
cout <<"enter no of edges";
cin >> m;
cout <<"\nEDGES \n";
for(k=1;k<=m;k++)
{
cin >>i>>j;
cost[i][j]=1;
}

cout <<"enter initial vertex";
cin >>v;
cout <<"Visitied vertices\n";
cout << v;
visited[v]=1;
k=1;
while(k<n)
{
for(j=1;j<=n;j++)
if(cost[v][j]!=0 && visited[j]!=1 && visit[j]!=1)
{
visit[j]=1;
qu[rare++]=j;
}
v=qu[front++];
cout<<v << " ";
k++;
visit[v]=0; visited[v]=1;
}
return 0;

}

>>>>>>>Alternative 01 <<<<<<<<<<<

#include<iostream>
 using namespace std;
  //P as the matrix chain, p[0], p[1] represents the first matrix, p[1], p[2] represents the second matrix, length is the length of the p
  //So if there are six matrix, length=7 matrix, m as storage optimal results, t as storage optimal results route
  //Two dimensional matrix
  void MatrixChainOrder(int *p,int (*m)[10],int (*t)[10],int length)
  {
      int n=length-1;
      int i,j,k,q,num=0;                                                                                                                                  
     for(i=2;i<=n;i++)
     {
         for(j=1;j<=n-i+1;j++)
         {
             k=j+i-1;
             m[j][k]=0x7fffffff;
             //Q is between J to k-1 number, purpose is divided by Q for exploratory matrix between K to j to,
             //In order to find the best partition, this is an ergodic test.
             for(q=j;q<=k-1;q++)
             {
                 num=m[j][q]+m[q+1][k]+p[j-1]*p[q]*p[k];
                 if(num<m[j][k])
                 {
                     m[j][k]=num;
                     t[j][k]=q;
                 }
             }
         }
     }
 }
 void PrintAnswer(int(*t)[10],int i,int j)
 {
     if(i==j)
     {
         cout<<"A"<<i;
     }
     else
     {
         cout<<"(";
         PrintAnswer(t,i,t[i][j]);
         PrintAnswer(t,t[i][j]+1,j);
         cout<<")";
     }

 }
 int main()
 {
     int p[7]={30,35,15,5,10,20,25};
     int m[10][10],t[10][10];
     MatrixChainOrder(p,m,t,7);
     MatrixChainOrder(p,m,t,7);
     PrintAnswer(t,1,6);
     cout<<endl;
     return 0;
 }


>>>>>>>Alternative 02 <<<<<<<<<<<

#include<stdio.h>
#include<limits.h>
#include<iostream>

using namespace std;


int MatrixChainOrder(int p[], int n)
{

    int m[n][n];
    int s[n][n];
    int i, j, k, L, q;


    for (i = 1; i < n; i++)
        m[i][i] = 0;


    for (L = 2; L < n; L++)
    {
        for (i = 1; i <= n - L + 1; i++)
        {
            j = i + L - 1;
            m[i][j] = INT_MAX;
            for (k = i; k <= j - 1; k++)
            {

                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j])
                {
                    m[i][j] = q;
                    s[i][j] = k;
                }
            }
        }
    }

    return m[1][n - 1];
}
int main()
{

    cout << "Enter the total length:";
    int n;
    cin >> n;
    int array[n];
    cout << "Enter the dimensions: ";
    for (int var = 0; var < n; ++var)
    {
        cin >> array[var];
    }
    cout << "Minimum number of multiplications is: " << MatrixChainOrder(array,
            n);
    return 0;
}



18  .BFS

#include<iostream>
using namespace std;

int graph[100][100], label[100];
int queue[100], front, rear;
int vertices, edges;

void initialize_queue()
{
	front = 0;
	rear = 0;
}

void enqueue(int node)
{
	queue[rear++] = node;
}

int dequeue()
{
	return queue[front++];
}

bool queue_empty()
{
	if(front == rear)
	{
		return true;
	}
	else
	{
		return false;
	}
}

void BFS(int startNode, int vertices)
{
	for(int i=0; i<vertices; i++)
	{
		label[i] = -1;
	}
	enqueue(startNode);
	label[startNode] = 0;
	while(!queue_empty())
	{
		int vn = dequeue();
		cout<< vn<< " ";
		for(int v=0; v<vertices; v++)
		{
			if(graph[vn][v] == 1)
			{
				if(label[v] == -1)
				{
					label[v] = 0;
					enqueue(v);
				}
			}
		}
		label[vn] = 1;
	}
	cout<<endl;
}


int main()
{
	int from, to, startNode;
	cout<<"No. of nodes: ";
	cin>>vertices;
	for(int i=0; i<vertices; i++)
	{
		for(int j=0; j< vertices; j++)
		{
			graph[i][j] = 0;
		}
	}

	cout<<"No. of edges: ";
	cin>>edges;
	for(int i=0; i<edges; i++)
	{
		cout<<"Enter vertecs x and y for edge: "<< i+1;
		cout<<" no. Edge from: ";
		cin>>from;
		cout<<"Edge to: ";
		cin>>to;
		graph[from][to] = 1;
		graph[to][from] = 1;
	}
	initialize_queue();
	cout<<"Enter Start Node:" ;
	cin>>startNode;
	BFS(startNode, vertices);
	return 0;
}

19. DFS

 #DFS

#include<iostream>
#include<conio.h>
#include<stdlib.h>
using namespace std;
int cost[10][10],i,j,k,n,stk[10],top,v,visit[10],visited[10];
 
main()
{
int m;
cout <<"enterno of vertices";
cin >> n;
cout <<"ente no of edges";
cin >> m;
cout <<"\nEDGES \n";
for(k=1;k<=m;k++)
{
cin >>i>>j;
cost[i][j]=1;
}
 
cout <<"enter initial vertex";
cin >>v;
cout <<"ORDER OF VISITED VERTICES";
cout << v <<" ";
visited[v]=1;
k=1;
while(k<n)
{
for(j=n;j>=1;j--)
if(cost[v][j]!=0 && visited[j]!=1 && visit[j]!=1)
{
visit[j]=1;
stk[top]=j;
top++;
}
v=stk[--top];
cout<<v << " ";
k++;
visit[v]=0; visited[v]=1;
}
}





20.  LCS

#include<stdio.h>
#include<string.h>

int i,j,m,n,c[20][20];
char x[20],y[20],b[20][20];

void print(int i,int j)
{
                if(i==0 || j==0)
                                return;
                if(b[i][j]=='c')
                {
                                print(i-1,j-1);
                                printf("%c",x[i-1]);
                }
                else if(b[i][j]=='u')
                                print(i-1,j);
                else
                                print(i,j-1);
}

void lcs()
{
                m=strlen(x);
                n=strlen(y);
                for(i=0;i<=m;i++)
                                c[i][0]=0;
                for(i=0;i<=n;i++)
                                c[0][i]=0;

                //c, u and l denotes cross, upward and downward directions respectively
                for(i=1;i<=m;i++)
                                for(j=1;j<=n;j++)
                                {
                                                if(x[i-1]==y[j-1])
                                                {
                                                                c[i][j]=c[i-1][j-1]+1;
                                                                b[i][j]='c';
                                                }
                                                else if(c[i-1][j]>=c[i][j-1])
                                                {
                                                                c[i][j]=c[i-1][j];
                                                                b[i][j]='u';
                                                }
                                                else
                                                {
                                                                c[i][j]=c[i][j-1];
                                                                b[i][j]='l';
                                                }
                                }
}

int main()
{
                printf("Enter 1st sequence:");
                scanf("%s",x);
                printf("Enter 2nd sequence:");
                scanf("%s",y);
                printf("\nThe Longest Common Subsequence is ");
                lcs();
                print(m,n);
        return 0;
}
>>>>>>>>>>>>>>>>>>>>>>>> Alternative <<<<<<<<<<<<<<<<
#include<iostream>
#include<cstring>
int i,j,m,n,c[20][20];
char x[20],y[20],b[20][20];
using namespace std;
void LCS(char x,char y){
 m=strlen(x[]);
 n=strlen(y[]);
for(int i=1;i<=m;i++)
     c[i][0]=0;
for (int j=1;j<=n;j++)
    c[0][j]=0;
    for(i=1;i<=m;i++){
        for(j=1;j<=n;j++){
            if(x[i]==y[i]){
                c[i][j]=c[i-0][j-1]+1;
                b[i][j]='l';
            }
            else if(c[i-1][j]>=c[i][j-1]){
                c[i][j]=0;
                b[i][j]='c';
            }
            else{
                c[i][j]=c[i][j-1];
                b[i][j]='s';
            }
        }
    }
}

int main()
{
   cout<<"enter the first sequence : ";
   cin>>x;
   cout<<"enter the second sequence : ";
   cin>>y;
   LCS(x,y);
    return 0;
}

21. Array as arguments   :
#include<iostream>
using namespace std;
void show_array(int *p,int n){
    int i;
    for(i=0;i<n;i++){
        cout<<*(p+i)<<endl;
    }
}

int main(){
int a[]={5,9,6,2,7,3,4};
int n;
n=sizeof(a)/sizeof(&a[0]);
show_array(a,n);
return 0;
}

22. Representation of an array by pointer  :

#include<iostream>
using namespace std;

int main(){
int a[]={5,9,6,2,7,3,4};
int n,i;
n=sizeof(a)/sizeof(&a[0]);
int *p;
p=&a[0];
for(i=0;i<n;i++){
    cout<<*(p+i)<<endl;
}
return 0;
}


23. Logarithms   :

#include<iostream>
using namespace std;

int main(){
int base,number;
cout<<"enter the value of base ";
cin>>base;
cout<<"enter the number to do log  :  ";

cin>>number;
int count=1,product=base;
while(product!=number){
    product=base*product;
    count++;
}
cout<<count;
return 0;
}




24. Factorials   :

#include<iostream>
using namespace std;

int main(){
int number;
cout<<"enter the number to do factorial  : ";
cin>>number;
int product=number;
for(int i=number-1;i>0;i--){
    product=i*product;
}
cout<<product;
return 0;
}

>>>>>>>>>>>>>  Alternative  <<<<<<<<

#include <iostream>
using namespace std;

int factorial(int);

int main() 
{
    int n;
    cout<<"Enter a number to find factorial: ";
    cin >> n;
    cout << "Factorial of " << n <<" = " << factorial(n);
    return 0;
}

int factorial(int n) 
{
    if (n > 1) 
    {
        return n*factorial(n-1);
    }
    else 
    {
        return 1;
    }
}

25.  PUSH/POP into/from Stack  :

#include<iostream>
using namespace std;
#define max_size 101
int a[max_size];
int top=-1;
void push(int x){
    if(top==max_size-1){
        cout<<"error : stack overflow"<<endl;
        return;
    }
top++;
a[top]=x;
}

void pop(){
    if(top==-1){
        cout<<"no element to pop"<<endl;
        return;
    }
top--;
}

int Top(){
return a[top];
}
void print(){
int i;
cout<<"stack : ";
for(i=0;i<=top;i++){
    cout<<a[i]<<" ";
}
cout<<endl;
}

int main(){
push(2);print();
push(5);print();
push(10);print();
pop();print();
push(12);print();
/*cout<<Top()<<endl;
cout<<max_size<<endl;*/

return 0;
}


26.  PUSH/POP into/from  Queue   :

#include<iostream>
using namespace std; 
#define MAX_SIZE 101  //maximum size of the array that will store Queue. 

// Creating a class named Queue.
class Queue
{
private:
	int A[MAX_SIZE];
	int front, rear; 
public:
	// Constructor - set front and rear as -1. 
	// We are assuming that for an empty Queue, both front and rear will be -1.
	Queue()
	{
		front = -1; 
		rear = -1;
	}

	// To check wheter Queue is empty or not
	bool IsEmpty()
	{
		return (front == -1 && rear == -1); 
	}

	// To check whether Queue is full or not
	bool IsFull()
	{
		return (rear+1)%MAX_SIZE == front ? true : false;
	}

	// Inserts an element in queue at rear end
	void Enqueue(int x)
	{
		cout<<"Enqueuing "<<x<<" \n";
		if(IsFull())
		{
			cout<<"Error: Queue is Full\n";
			return;
		}
		if (IsEmpty())
		{ 
			front = rear = 0; 
		}
		else
		{
		    rear = (rear+1)%MAX_SIZE;
		}
		A[rear] = x;
	}

	// Removes an element in Queue from front end. 
	void Dequeue()
	{
		cout<<"Dequeuing \n";
		if(IsEmpty())
		{
			cout<<"Error: Queue is Empty\n";
			return;
		}
		else if(front == rear ) 
		{
			rear = front = -1;
		}
		else
		{
			front = (front+1)%MAX_SIZE;
		}
	}
	// Returns element at front of queue. 
	int Front()
	{
		if(front == -1)
		{
			cout<<"Error: cannot return front from empty queue\n";
			return -1; 
		}
		return A[front];
	}
	/* 
	   Printing the elements in queue from front to rear. 
	   This function is only to test the code. 
	   This is not a standard function for Queue implementation. 
	*/
	void Print()
	{
		// Finding number of elements in queue  
		int count = (rear+MAX_SIZE-front)%MAX_SIZE + 1;
		cout<<"Queue       : ";
		for(int i = 0; i <count; i++)
		{
			int index = (front+i) % MAX_SIZE; // Index of element while travesing circularly from front
			cout<<A[index]<<" ";
		}
		cout<<"\n\n";
	}
};
int main()
{
	/*Driver Code to test the implementation
	  Printing the elements in Queue after each Enqueue or Dequeue 
	*/
   Queue Q; // creating an instance of Queue. 
   Q.Enqueue(2);  Q.Print();  
   Q.Enqueue(4);  Q.Print();  
   Q.Enqueue(6);  Q.Print();
   Q.Dequeue();	  Q.Print();
   Q.Enqueue(8);  Q.Print();
}

27.  PUSH/POP into/from circular Queue


#include<iostream>
using namespace std; 
#define MAX_SIZE 101  //maximum size of the array that will store Queue. 

// Creating a class named Queue.
class Queue
{
private:
	int A[MAX_SIZE];
	int front, rear; 
public:
	// Constructor - set front and rear as -1. 
	// We are assuming that for an empty Queue, both front and rear will be -1.
	Queue()
	{
		front = -1; 
		rear = -1;
	}

	// To check wheter Queue is empty or not
	bool IsEmpty()
	{
		return (front == -1 && rear == -1); 
	}

	// To check whether Queue is full or not
	bool IsFull()
	{
		return (rear+1)%MAX_SIZE == front ? true : false;
	}

	// Inserts an element in queue at rear end
	void Enqueue(int x)
	{
		cout<<"Enqueuing "<<x<<" \n";
		if(IsFull())
		{
			cout<<"Error: Queue is Full\n";
			return;
		}
		if (IsEmpty())
		{ 
			front = rear = 0; 
		}
		else
		{
		    rear = (rear+1)%MAX_SIZE;
		}
		A[rear] = x;
	}

	// Removes an element in Queue from front end. 
	void Dequeue()
	{
		cout<<"Dequeuing \n";
		if(IsEmpty())
		{
			cout<<"Error: Queue is Empty\n";
			return;
		}
		else if(front == rear ) 
		{
			rear = front = -1;
		}
		else
		{
			front = (front+1)%MAX_SIZE;
		}
	}
	// Returns element at front of queue. 
	int Front()
	{
		if(front == -1)
		{
			cout<<"Error: cannot return front from empty queue\n";
			return -1; 
		}
		return A[front];
	}
	/* 
	   Printing the elements in queue from front to rear. 
	   This function is only to test the code. 
	   This is not a standard function for Queue implementation. 
	*/
	void Print()
	{
		// Finding number of elements in queue  
		int count = (rear+MAX_SIZE-front)%MAX_SIZE + 1;
		cout<<"Queue       : ";
		for(int i = 0; i <count; i++)
		{
			int index = (front+i) % MAX_SIZE; // Index of element while travesing circularly from front
			cout<<A[index]<<" ";
		}
		cout<<"\n\n";
	}
};
int main()
{
	/*Driver Code to test the implementation
	  Printing the elements in Queue after each Enqueue or Dequeue 
	*/
   Queue Q; // creating an instance of Queue. 
   Q.Enqueue(2);  Q.Print();  
   Q.Enqueue(4);  Q.Print();  
   Q.Enqueue(6);  Q.Print();
   Q.Dequeue();	  Q.Print();
   Q.Enqueue(8);  Q.Print();
} 


28. Singly Link list     

#include <iostream>

using namespace std;

struct Node
{
    int data;
    Node *next;
};

Node *head;

Node * GetNewNode(int x)
{
    Node * NewNode = new Node();
    NewNode->data=x;
    NewNode->next=NULL;
    return NewNode;
}

void InsertAtHead(int x)
{
    Node * NewNode=GetNewNode(x);

    NewNode->next=head;
    head=NewNode;
}

void InsertAtTail(int x)
{
     Node * NewNode=GetNewNode(x);

     if(head==NULL)
     {
         head=NewNode;
        return;
     }

     Node * temp=head;

     while(temp->next!=NULL)
     {
         temp=temp->next;
     }

     temp->next=NewNode;

}

void InsertAtAnyPosition(int n, int x)
{

    Node * NewNode=GetNewNode(x);

    if(n==1)
    {
        NewNode->next=head;
        head=NewNode;
        return;
    }

    Node * temp=head;

    for(int  i=1;i<n-1;i++)
    {
        temp=temp->next;
    }

    NewNode->next=temp->next;

    temp->next=NewNode;
}


void travers()
{
    Node * temp=head;

    cout<<"List is:";

    while(temp!=NULL)
    {
        cout<<temp->data<< " ";

        temp=temp->next;
    }

    cout<<endl;
}

void sea_rch(int x)
{
    Node * temp = head;
    while(temp!=NULL)
    {
          if(temp->data==x)
          {
              cout<<"found"<<endl;
              return;
          }
          temp =temp->next;
    }

     cout<<"Not found"<<endl;

}




int main()
{

    head=NULL;
    InsertAtHead(5);
    InsertAtHead(6);

    InsertAtHead(7);
    InsertAtHead(8);

    travers();
     travers();

    InsertAtAnyPosition(2,11);

      travers();

      sea_rch(11);
      sea_rch(100);

      travers();
     travers();

    return 0;
}

29. next index value of adjacent array must be greater

#include <iostream>

using namespace std;

int main()
{
    int s[]={1,3,5,9,11};
    int f[]={3,4,7,11,12};
    int n=sizeof(s)/sizeof(s[0]);
    int i=0;
     cout<<i;
        for(int j=1;j<n;j++){
                if(f[i]<=s[j]){
                    cout<<j;
            i=j;
                }

        }

    return 0;
}


30.    DIJKSTRA

#include<iostream>
#include<conio.h>
#include<stdio.h>
using namespace std;
int shortest(int ,int);
int cost[10][10],dist[20],i,j,n,k,m,S[20],v,totcost,path[20],p;
main()
{
int c;
cout <<"enter no of vertices";
cin >> n;
cout <<"enter no of edges"; 
cin >>m;
cout <<"\nenter\nEDGE Cost\n";
for(k=1;k<=m;k++)
{
cin >> i >> j >>c;
cost[i][j]=c;
}
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
if(cost[i][j]==0)
cost[i][j]=31999;
cout <<"enter initial vertex";
cin >>v;
cout << v<<"\n";
shortest(v,n);
 }
 
int shortest(int v,int n)
{
int min;
for(i=1;i<=n;i++)
{
S[i]=0;
dist[i]=cost[v][i];
}
path[++p]=v;
S[v]=1;
dist[v]=0;
for(i=2;i<=n-1;i++)
{
k=-1;
min=31999;
for(j=1;j<=n;j++)
{
if(dist[j]<min && S[j]!=1)
{
min=dist[j];
k=j;
} 
}
if(cost[v][k]<=dist[k])
p=1;
path[++p]=k;
for(j=1;j<=p;j++)
cout<<path[j];
cout <<"\n";
//cout <<k;
S[k]=1;
for(j=1;j<=n;j++)
if(cost[k][j]!=31999 && dist[j]>=dist[k]+cost[k][j] && S[j]!=1)
 dist[j]=dist[k]+cost[k][j];
}
}


31.    Kruskal


#include<iostream>
#include<conio.h>
#include<stdlib.h>
using namespace std;
int cost[10][10],i,j,k,n,m,c,visit,visited[10],l,v,count,count1,vst,p;
 
main()
{
int dup1,dup2;
cout<<"enter no of vertices";
cin >> n;
cout <<"enter no of edges";
cin >>m;
cout <<"EDGE Cost";
for(k=1;k<=m;k++)
{
cin >>i >>j >>c;
cost[i][j]=c;
cost[j][i]=c;
}
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
if(cost[i][j]==0)
cost[i][j]=31999;
visit=1;
while(visit<n)
{
v=31999;
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
if(cost[i][j]!=31999 && cost[i][j]<v  && cost[i][j]!=-1 )
{
int count =0;
for(p=1;p<=n;p++)
{
if(visited[p]==i || visited[p]==j)
count++;
}
if(count >= 2)
{
for(p=1;p<=n;p++)
if(cost[i][p]!=31999 && p!=j)
dup1=p;
for(p=1;p<=n;p++)
if(cost[j][p]!=31999 && p!=i)
dup2=p;
 
if(cost[dup1][dup2]==-1)
continue;
}
l=i;
k=j;
v=cost[i][j];
}
cout <<"edge from " <<l <<"-->"<<k;
cost[l][k]=-1;
cost[k][l]=-1;
visit++;
int count=0;
count1=0;
for(i=1;i<=n;i++)
{
if(visited[i]==l)
count++;
if(visited[i]==k)
count1++;
} 
if(count==0)
visited[++vst]=l;
if(count1==0)
visited[++vst]=k;
}
}

ARTIFICIAL INTELLIGENCE AND EXPERT SYSTEM [B]

32.-----------------fibonacci series------------------

#include <iostream>

using namespace std;

int fibo(int i){
    if(i==0 ||i==1){
     return i;
    }
    else{
        return (fibo(i-2)+fibo(i-1));
    }
}
int main()
{
    int n,m=0;
    cout<<"enter the number of element";
    cin>>n;
    while(m<n){
        cout<<fibo(m)<<",";
        m++;
    }
    return 0;
}







33.-----------Graph-----------
#include <iostream>

using namespace std;

int main()
{
 cout<<"enter the number of nodes : ";
 int n;
 cin>>n;
 int m=n;
 int a[n][m];
 for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
            a[i][j]=0;
    }
 }
 for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
            cout<<a[i][j]<<" ";
    }
    cout<<endl;
 }
 int e;
 cout<<"enter the number of edges : ";
 cin>>e;
 cout<<"enter the source and destination : ";
 int s,d;
 for(int k=0;k<e;k++){
    cin>>s>>d;
    a[s][d]=1;
 }

 for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
            cout<<a[i][j]<<" ";
    }
    cout<<endl;
 }
int barati;
cout<<"enter the barati id :";
cin>>barati;
int flag=0;
if(barati>=n){
    cout<<"invalid";
}
else{
    for(int i=0;i<n;i++){
        if(a[barati][i]==1){
            flag++;
        }
        else
            cout<<" ";
    }
    cout<<"number of neighbor : "<<flag;
}

}

34.----------Reflex_Vacuum_Agent-------------
#include <iostream>
using namespace std;
string Reflex_Vacuum_Agent(string location,string status){
if(status=="Dirty"){
    return "Suck";
}
else if(location=="A"){
    return "right";
}
else if(location=="B"){
    return "Left";
}
}
int main()
{

    string l,s;
    string y="yes";
    while(y=="yes"){
    cout<<"insert location and status : "<<endl;
    cin>>l>>s;
    cout<<Reflex_Vacuum_Agent(l,s)<<endl;
    cout<<"if wants to work again, enter yes, otherwise no"<<endl;
    cin>>y;

    }

    //cout<<Reflex_Vacuum_Agent("A","Dirty")<<endl;
    //cout<<Reflex_Vacuum_Agent("B","Clean")<<endl;
    //cout<<Reflex_Vacuum_Agent("B","Dirty")<<endl;

    return 0;
}

35.----------Simple_Vacuum_Agent-------------
#include <iostream>
#include<string>
using namespace std;
string Rule_Action(string rule){
  if(rule=="rule1") {
    return "Suck";
  }
  else if(rule=="rule2") {
    return "Right";
  }
  else if(rule=="rule3") {
    return "Suck";
  }
  else{
    return "Left";
  }
}

string Rule_Match(string state, string rules){
    if(state=="A"&&rules=="Dirty"){
    return Rule_Action("rule1");
}
else if(state=="A"&&rules=="Clean"){
    return Rule_Action("rule2");
}
else if(state=="B"&&rules=="Dirty"){
    return Rule_Action("rule3");
}
else if(state=="B"&&rules=="Clean"){
    return Rule_Action("rule4");
}
}

string Interpret_input(string per){
    string location, status;
    if (per=="A,Dirty"){
    location="A";
    status="Dirty";

       return  Rule_Match(location,status);
    }
    else if (per=="B,Dirty"){
    location="B";
    status="Dirty";

       return  Rule_Match(location,status);
    }
     else if (per=="A,Clean"){
    location="A";
    status="Clean";

       return  Rule_Match(location,status);
    }
    else if (per=="B,Clean"){
    location="B";
    status="Clean";

       return  Rule_Match(location,status);
    }

}

string Simple_Vacuum_Agent(string percept){
  return Interpret_input(percept);
}

int main()
{

    string p;
    string y="yes";
    while(y=="yes"){
    cout<<"insert percept : "<<endl;
    cin>>p;
    cout<<Simple_Vacuum_Agent(p)<<endl;
    cout<<"if wants to work again, enter yes, otherwise no"<<endl;
    cin>>y;
    }

    return 0;
}
